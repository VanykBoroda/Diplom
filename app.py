import streamlit as st
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
import logging
import time
import json
from datetime import datetime, timedelta
from pathlib import Path
import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from src.data_loader import DataLoader
from src.preprocessor import StudentDataPreprocessor
from src.model import DropoutPredictor
from src.evaluator import ModelEvaluator
from src.monitoring import PerformanceMonitor, StudentRiskTracker
from src.reporting import ReportGenerator
import src.utils as utils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
utils.create_directory_structure()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data(file_path=None, generate_sample=False, sample_size=1000):
    loader = DataLoader()
    
    if generate_sample:
        data = loader.generate_sample_data(sample_size)
        st.success(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å {sample_size} –∑–∞–ø–∏—Å—è–º–∏")
    elif file_path:
        data = loader.load_local_file(file_path)
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ {file_path}")
    else:
        data = None
        
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def preprocess_data(data, target_column='dropout'):
    preprocessor = StudentDataPreprocessor()
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    data_enriched = preprocessor.create_additional_features(data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    X, y = preprocessor.fit_transform(data_enriched, target_column)
    
    return preprocessor, X, y, data_enriched

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
def train_model(X, y, model_name, hyperparameter_tuning=False):
    predictor = DropoutPredictor()
    
    with st.spinner(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name}..."):
        start_time = time.time()
        metrics = predictor.train(X, y, model_name=model_name, 
                                 hyperparameter_tuning=hyperparameter_tuning)
        training_time = time.time() - start_time
    
    st.success(f"–ú–æ–¥–µ–ª—å {model_name} –æ–±—É—á–µ–Ω–∞ –∑–∞ {training_time:.2f} —Å–µ–∫.")
    
    return predictor, metrics

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
def display_metrics(metrics):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Accuracy", f"{metrics['accuracy']:.4f}")
    col2.metric("Precision", f"{metrics['precision']:.4f}")
    col3.metric("Recall", f"{metrics['recall']:.4f}")
    col4.metric("F1 Score", f"{metrics['f1']:.4f}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if 'cv_accuracy_mean' in metrics:
        st.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏ (CV=5): "
               f"Accuracy = {metrics['cv_accuracy_mean']:.4f} ¬± {metrics['cv_accuracy_std']:.4f}")
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    if 'confusion_matrix' in metrics:
        cm = np.array(metrics['confusion_matrix'])
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax)
        ax.set_xlabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
        ax.set_ylabel('–ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
        ax.set_title('–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫')
        st.pyplot(fig)
        
    # ROC –∫—Ä–∏–≤–∞—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'roc_curve' in metrics:
        fig, ax = plt.subplots(figsize=(6, 4))
        fpr = np.array(metrics['roc_curve']['fpr'])
        tpr = np.array(metrics['roc_curve']['tpr'])
        auc = metrics['roc_curve']['auc']
        ax.plot(fpr, tpr, lw=2, label=f'ROC curve (AUC = {auc:.2f})')
        ax.plot([0, 1], [0, 1], 'k--')
        ax.set_xlim([0.0, 1.0])
        ax.set_ylim([0.0, 1.05])
        ax.set_xlabel('False Positive Rate')
        ax.set_ylabel('True Positive Rate')
        ax.set_title('ROC Curve')
        ax.legend(loc="lower right")
        st.pyplot(fig)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
def display_feature_importance(predictor, feature_names):
    feature_importance = predictor.get_feature_importances(feature_names)
    
    if feature_importance is not None:
        st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        st.dataframe(feature_importance.head(20))
        
        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(10, 6))
        importance_col = 'importance' if 'importance' in feature_importance.columns else 'coefficient'
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-15 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        top_features = feature_importance.head(15)
        sns.barplot(x=top_features[importance_col], y=top_features['feature'], palette='viridis', ax=ax)
        ax.set_title('–¢–æ–ø-15 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
        ax.set_xlabel('–í–∞–∂–Ω–æ—Å—Ç—å')
        ax.set_ylabel('–ü—Ä–∏–∑–Ω–∞–∫')
        st.pyplot(fig)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è
def analyze_student_risks(predictor, data, X, threshold=0.5):
    st.subheader("–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predictions, probabilities = predictor.predict(X)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    if probabilities is not None:
        if 'student_id' in data.columns:
            student_ids = data['student_id']
        else:
            student_ids = [f"Student_{i}" for i in range(len(predictions))]
            
        results = pd.DataFrame({
            'student_id': student_ids,
            'dropout_probability': probabilities,
            'prediction': predictions,
            'risk_level': pd.cut(
                probabilities, 
                bins=[0, 0.3, 0.6, 1.0], 
                labels=['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π']
            )
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        st.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(results)}")
        risk_counts = results['risk_level'].value_counts()
        st.write(f"–°—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è: {risk_counts.get('–í—ã—Å–æ–∫–∏–π', 0)} "
                f"({risk_counts.get('–í—ã—Å–æ–∫–∏–π', 0) / len(results) * 100:.1f}%)")
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(results['dropout_probability'], bins=20, kde=True, ax=ax)
        ax.axvline(x=threshold, color='red', linestyle='--', 
                  label=f'–ü–æ—Ä–æ–≥ ({threshold})')
        ax.set_xlabel('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è')
        ax.legend()
        st.pyplot(fig)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        st.subheader("–°—Ç—É–¥–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è")
        high_risk = results[results['risk_level'] == '–í—ã—Å–æ–∫–∏–π'].sort_values(
            by='dropout_probability', ascending=False)
        
        if not high_risk.empty:
            st.dataframe(high_risk)
            
            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            csv = high_risk.to_csv(index=False)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º",
                data=csv,
                file_name='high_risk_students.csv',
                mime='text/csv',
            )
        else:
            st.info("–°—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        save_assessment = st.checkbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞", value=True)
        
        if save_assessment:
            tracker = StudentRiskTracker()
            notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –æ—Ü–µ–Ω–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
            
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤"):
                model_version = predictor.model_name if hasattr(predictor, 'model_name') else "unknown_model"
                tracker.add_risk_assessment(
                    assessment_date=datetime.now(),
                    student_risks=results,
                    model_version=model_version,
                    notes=notes if notes else None
                )
                st.success("–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        
        return results
    else:
        st.warning("–î–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        return None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
    page_icon="üéì",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
st.markdown("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–º–µ–Ω–∏ –°.–Æ. –í–∏—Ç—Ç–µ")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
mode = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", 
    ["–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑", "–û —Å–∏—Å—Ç–µ–º–µ"]
)

# –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'data' not in st.session_state:
    st.session_state.data = None
if 'predictor' not in st.session_state:
    st.session_state.predictor = None
if 'preprocessor' not in st.session_state:
    st.session_state.preprocessor = None
if 'X' not in st.session_state:
    st.session_state.X = None
if 'y' not in st.session_state:
    st.session_state.y = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
if mode == "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data_source = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
        ["–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å Kaggle", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"]
    )
    
    if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", 
                                        type=["csv", "xlsx", "xls"])
        
        if uploaded_file is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(os.path.join("data", uploaded_file.name), "wb") as f:
                f.write(uploaded_file.getbuffer())
                
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            file_path = os.path.join("data", uploaded_file.name)
            st.session_state.data = load_data(file_path=file_path)
    
    elif data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å Kaggle":
        st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Kaggle")
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞
        kaggle_dataset = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'username/dataset-name'",
            placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ronitf/heart-disease-uci'"
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ API –∫–ª—é—á–∞ Kaggle
        st.info("""
        –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Kaggle –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á:
        1. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ [Kaggle](https://www.kaggle.com)
        2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "Account" -> "Create New API Token"
        3. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª kaggle.json –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –≤ –ø–∞–ø–∫—É ~/.kaggle/ (Linux/Mac) –∏–ª–∏ C:\\Users\\YOUR_USERNAME\\.kaggle\\ (Windows)
        """)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç —Å Kaggle") and kaggle_dataset:
            try:
                with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ {kaggle_dataset}..."):
                    loader = DataLoader()
                    path = loader.download_from_kaggle(kaggle_dataset)
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –¥–∞—Ç–∞—Å–µ—Ç–∞
                    kaggle_files = [f for f in os.listdir(path) if f.endswith(('.csv', '.xlsx', '.xls'))]
                    
                    if kaggle_files:
                        selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", kaggle_files)
                        file_path = os.path.join(path, selected_file)
                        st.session_state.data = load_data(file_path=file_path)
                    else:
                        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç–∞—Å–µ—Ç–∞: {str(e)}")
    
    elif data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞":
        st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
        
        cloud_option = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
            ["Google Drive", "Dropbox", "Microsoft OneDrive", "Amazon S3"]
        )
        
        if cloud_option == "Google Drive":
            drive_link = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Google Drive",
                placeholder="https://drive.google.com/file/d/..."
            )
            
            st.info("""
            –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Å—Å—ã–ª–∫–µ.
            URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://drive.google.com/file/d/{file_id}/view
            """)
            
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å Google Drive") and drive_link:
                try:
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å Google Drive..."):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º file_id –∏–∑ URL
                        file_id_match = re.search(r'\/d\/([^\/]+)', drive_link)
                        
                        if file_id_match:
                            file_id = file_id_match.group(1)
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                            loader = DataLoader()
                            file_path = loader.download_from_google_drive(file_id)
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            st.session_state.data = load_data(file_path=file_path)
                            st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Google Drive")
                        else:
                            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ Google Drive. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç '/d/{file_id}'")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å Google Drive: {str(e)}")
        
        elif cloud_option == "Dropbox":
            dropbox_link = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Dropbox",
                placeholder="https://www.dropbox.com/..."
            )
            
            st.info("""
            –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
            URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://www.dropbox.com/
            """)
            
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å Dropbox") and dropbox_link:
                try:
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å Dropbox..."):
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                        loader = DataLoader()
                        file_path = loader.download_from_dropbox(dropbox_link)
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        st.session_state.data = load_data(file_path=file_path)
                        st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Dropbox")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å Dropbox: {str(e)}")
        
        elif cloud_option == "Microsoft OneDrive":
            onedrive_link = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ OneDrive",
                placeholder="https://1drv.ms/..."
            )
            
            st.info("""
            –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
            URL –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://1drv.ms/ –∏–ª–∏ https://onedrive.live.com/
            """)
            
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å OneDrive") and onedrive_link:
                try:
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å OneDrive..."):
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                        loader = DataLoader()
                        file_path = loader.download_from_onedrive(onedrive_link)
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        st.session_state.data = load_data(file_path=file_path)
                        st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ OneDrive")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å OneDrive: {str(e)}")
        
        elif cloud_option == "Amazon S3":
            st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å Amazon S3")
            
            # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            col1, col2 = st.columns(2)
            
            with col1:
                bucket_name = st.text_input("Bucket Name", placeholder="my-bucket")
                object_key = st.text_input("Object Key", placeholder="path/to/my/file.csv")
                aws_region = st.selectbox("AWS Region", ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "eu-west-1", "eu-central-1", "ap-northeast-1"])
            
            with col2:
                aws_access_key = st.text_input("AWS Access Key ID")
                aws_secret_key = st.text_input("AWS Secret Access Key", type="password")
            
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å Amazon S3") and bucket_name and object_key and aws_access_key and aws_secret_key:
                try:
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å Amazon S3..."):
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                        loader = DataLoader()
                        file_path = loader.download_from_aws_s3(
                            bucket_name=bucket_name,
                            object_key=object_key,
                            aws_access_key_id=aws_access_key,
                            aws_secret_access_key=aws_secret_key,
                            region_name=aws_region
                        )
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        st.session_state.data = load_data(file_path=file_path)
                        st.success(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Amazon S3")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å Amazon S3: {str(e)}")
    
    else:  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sample_size = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", 100, 5000, 1000)
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.data = load_data(generate_sample=True, sample_size=sample_size)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if st.session_state.data is not None:
        st.header("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(st.session_state.data.head(100))
        
        st.markdown(f"**–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:** {st.session_state.data.shape[0]} —Å—Ç—Ä–æ–∫, {st.session_state.data.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if 'dropout' in st.session_state.data.columns:
            dropout_counts = st.session_state.data['dropout'].value_counts()
            dropout_rate = dropout_counts.get(1, 0) / len(st.session_state.data) * 100
            
            st.info(f"–î–æ–ª—è –æ—Ç—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {dropout_rate:.2f}% ({dropout_counts.get(1, 0)} –∏–∑ {len(st.session_state.data)})")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            fig, ax = plt.subplots(figsize=(6, 4))
            sns.countplot(x='dropout', data=st.session_state.data, ax=ax)
            ax.set_xlabel('–û—Ç—á–∏—Å–ª–µ–Ω')
            ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
            ax.set_xticklabels(['–ù–µ –æ—Ç—á–∏—Å–ª–µ–Ω', '–û—Ç—á–∏—Å–ª–µ–Ω'])
            st.pyplot(fig)

elif mode == "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
    st.header("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    
    if st.session_state.data is None:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'")
    else:
        # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        target_column = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é",
            st.session_state.data.columns.tolist(),
            index=st.session_state.data.columns.tolist().index('dropout') if 'dropout' in st.session_state.data.columns else 0
        )
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è")
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        predictor = DropoutPredictor()
        available_models = predictor.get_available_models()
        
        model_name = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
            list(available_models.keys()),
            index=list(available_models.keys()).index('random_forest')
        )
        
        hyperparameter_tuning = st.checkbox("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", False)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
        if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            with st.spinner("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                st.session_state.preprocessor, st.session_state.X, st.session_state.y, data_enriched = preprocess_data(
                    st.session_state.data, target_column)
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã")
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            st.session_state.predictor, metrics = train_model(
                st.session_state.X, st.session_state.y, model_name, hyperparameter_tuning)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")
            display_metrics(metrics)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            monitor = PerformanceMonitor()
            dataset_info = {
                'size': len(st.session_state.data),
                'target_column': target_column,
                'hyperparameter_tuning': hyperparameter_tuning
            }
            monitor.add_metrics(metrics, model_name, dataset_info)
            st.success("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            if hasattr(st.session_state.preprocessor, 'get_feature_names'):
                feature_names = st.session_state.preprocessor.get_feature_names()
            else:
                feature_names = [f"feature_{i}" for i in range(st.session_state.X.shape[1])]
                
            display_feature_importance(st.session_state.predictor, feature_names)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            save_model = st.checkbox("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", True)
            
            if save_model:
                model_path = st.session_state.predictor.save_model()
                st.success(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {model_path}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è
            analyze_student_risks(st.session_state.predictor, st.session_state.data, st.session_state.X)

elif mode == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è":
    st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è")
    
    # –í—ã–±–æ—Ä: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
    model_source = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –º–æ–¥–µ–ª–∏",
        ["–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"]
    )
    
    if model_source == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å":
        if st.session_state.predictor is None:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'")
        else:
            st.success(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {st.session_state.predictor.model_name}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª—å—é
            if st.session_state.X is not None:
                analyze_student_risks(st.session_state.predictor, st.session_state.data, st.session_state.X)
            else:
                st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ä–∞–∑–¥–µ–ª—É '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'")
    
    else:  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        model_files = [f for f in os.listdir("models") if f.endswith(".joblib")]
        
        if not model_files:
            st.warning("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        else:
            selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", model_files)
            model_path = os.path.join("models", selected_model)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
            if st.session_state.data is None:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö'")
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
                if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"):
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏..."):
                        predictor = DropoutPredictor()
                        predictor.load_model(model_path)
                        st.session_state.predictor = predictor
                        st.success(f"–ú–æ–¥–µ–ª—å {predictor.model_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    
                    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    with st.spinner("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                        st.session_state.preprocessor, st.session_state.X, st.session_state.y, data_enriched = preprocess_data(
                            st.session_state.data)
                        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã")
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
                    analyze_student_risks(st.session_state.predictor, st.session_state.data, st.session_state.X)

elif mode == "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑":
    st.header("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑")
    
    monitoring_tab, risk_tracking_tab = st.tabs(["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤"])
    
    with monitoring_tab:
        st.subheader("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä
        monitor = PerformanceMonitor()
        
        # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        monitor_action = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            ["–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π", "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –º–µ—Ç—Ä–∏–∫", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"]
        )
        
        if monitor_action == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫":
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
            metrics_history = monitor.get_metrics_history()
            
            if metrics_history.empty:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
            else:
                st.dataframe(metrics_history)
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                st.subheader("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫")
                
                # –§–∏–ª—å—Ç—Ä—ã
                model_versions = metrics_history['model_version'].unique()
                metric_names = metrics_history['metric_name'].unique()
                
                selected_models = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–µ–π", model_versions)
                selected_metrics = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏", metric_names)
                
                if selected_models and selected_metrics:
                    filtered_history = metrics_history[
                        metrics_history['model_version'].isin(selected_models) & 
                        metrics_history['metric_name'].isin(selected_metrics)
                    ]
                    
                    st.dataframe(filtered_history)
        
        elif monitor_action == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π":
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
            metrics_history = monitor.get_metrics_history()
            
            if metrics_history.empty:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
            else:
                model_versions = metrics_history['model_version'].unique()
                
                if len(model_versions) < 2:
                    st.warning("–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ –º–æ–¥–µ–ª–∏. –û–±—É—á–∏—Ç–µ –µ—â–µ –º–æ–¥–µ–ª–∏.")
                else:
                    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    selected_models = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", 
                        model_versions,
                        default=list(model_versions)[:2]
                    )
                    
                    # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    metric_names = metrics_history['metric_name'].unique()
                    selected_metrics = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", 
                        metric_names,
                        default=list(metric_names)[:3]
                    )
                    
                    if selected_models and selected_metrics and len(selected_models) >= 2:
                        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π..."):
                            fig = monitor.compare_models(
                                model_versions=selected_models, 
                                metrics=selected_metrics
                            )
                            st.pyplot(fig)
                    else:
                        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º –¥–≤–µ –º–æ–¥–µ–ª–∏ –∏ –æ–¥–Ω—É –º–µ—Ç—Ä–∏–∫—É")
        
        elif monitor_action == "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –º–µ—Ç—Ä–∏–∫":
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
            metrics_history = monitor.get_metrics_history()
            
            if metrics_history.empty:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
            else:
                # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
                metric_names = metrics_history['metric_name'].unique()
                selected_metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É", metric_names)
                
                # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π
                model_versions = metrics_history['model_version'].unique()
                selected_models = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏", model_versions)
                
                # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
                window_size = st.slider("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ", 1, 10, 1)
                
                if selected_metric and selected_models:
                    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞ –º–µ—Ç—Ä–∏–∫–∏..."):
                        fig = monitor.plot_metrics_trend(
                            metric_name=selected_metric,
                            model_versions=selected_models,
                            window=window_size
                        )
                        st.pyplot(fig)
        
        elif monitor_action == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞":
            st.subheader("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
            report_generator = ReportGenerator()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
            metrics_history = monitor.get_metrics_history()
            
            if metrics_history.empty:
                st.info("–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –ø—É—Å—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π.")
            else:
                # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                model_versions = metrics_history['model_version'].unique()
                selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç—á–µ—Ç–∞", model_versions)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                model_metrics = metrics_history[metrics_history['model_version'] == selected_model]
                
                # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                metric_names = model_metrics['metric_name'].unique()
                
                if len(metric_names) > 0:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                    tracker = StudentRiskTracker()
                    assessment_dates = tracker.get_all_assessment_dates()
                    
                    # –ù–∞—Ö–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
                    model_assessments = []
                    model_assessment_dates = []
                    
                    for date in assessment_dates:
                        assessment = tracker.get_risk_assessment(date)
                        if assessment and assessment['model_version'] == selected_model:
                            model_assessments.append(assessment)
                            model_assessment_dates.append(date)
                    
                    if model_assessments:
                        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
                        selected_date = st.selectbox(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤", 
                            model_assessment_dates, 
                            index=len(model_assessment_dates)-1
                        )
                        
                        selected_assessment = tracker.get_risk_assessment(selected_date)
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—á–µ—Ç–∞
                        latest_metrics = {}
                        for _, row in model_metrics.iterrows():
                            if not isinstance(row['metric_value'], (dict, list)):
                                latest_metrics[row['metric_name']] = row['metric_value']
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                        if st.button("–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"):
                            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞..."):
                                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                                latest_metrics['model_name'] = selected_model
                                
                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                                report_path = report_generator.generate_risk_report(
                                    student_risks=selected_assessment['student_risks'],
                                    model_info=latest_metrics,
                                    report_title=f"–û—Ç—á–µ—Ç –æ —Ä–∏—Å–∫–∞—Ö –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è ({selected_date})"
                                )
                                
                                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                                with open(report_path, 'r', encoding='utf-8') as f:
                                    report_html = f.read()
                                
                                st.success(f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                                st.download_button(
                                    label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç (HTML)",
                                    data=report_html,
                                    file_name=f"risk_report_{selected_date}.html",
                                    mime="text/html"
                                )
                    else:
                        st.warning("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ —Ä–∏—Å–∫–æ–≤. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é.")
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç—Ä–∏–∫–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.")
                    
    with risk_tracking_tab:
        st.subheader("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —Ä–∏—Å–∫–æ–≤
        tracker = StudentRiskTracker()
        
        # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        risk_action = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            ["–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∏—Å–∫–∞–º", "–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∏—Å–∫–æ–≤", "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"]
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –æ—Ü–µ–Ω–æ–∫
        assessment_dates = tracker.get_all_assessment_dates()
        
        if not assessment_dates:
            st.info("–ò—Å—Ç–æ—Ä–∏—è —Ä–∏—Å–∫–æ–≤ –ø—É—Å—Ç–∞. –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è.")
        else:
            if risk_action == "–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∏—Å–∫–∞–º":
                # –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è —Å–≤–æ–¥–∫–∏
                selected_date = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–¥–∫–∏", 
                    assessment_dates, 
                    index=len(assessment_dates)-1
                )
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏
                summary = tracker.generate_risk_summary(selected_date)
                
                if summary:
                    st.write(f"### –°–≤–æ–¥–∫–∞ –ø–æ —Ä–∏—Å–∫–∞–º –Ω–∞ {summary['date']}")
                    st.write(f"**–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:** {summary['total_students']}")
                    st.write(f"**–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è:** {summary['mean_risk']:.2f}")
                    st.write(f"**–°—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º:** {summary['extreme_risk_count']} ({summary['extreme_risk_count']/summary['total_students']*100:.1f}%)")
                    
                    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞
                    risk_df = pd.DataFrame({
                        '–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞': list(summary['risk_levels'].keys()),
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤': list(summary['risk_levels'].values()),
                        '–ü—Ä–æ—Ü–µ–Ω—Ç': [summary['risk_percentages'][k] for k in summary['risk_levels'].keys()]
                    })
                    
                    st.write("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞")
                    st.dataframe(risk_df)
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    fig, ax = plt.subplots(figsize=(10, 6))
                    colors = ['green', 'orange', 'red']
                    ax.pie(
                        risk_df['–ü—Ä–æ—Ü–µ–Ω—Ç'], 
                        labels=risk_df['–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞'], 
                        colors=colors,
                        autopct='%1.1f%%', 
                        startangle=90
                    )
                    ax.axis('equal')
                    st.pyplot(fig)
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    st.write(f"**–ú–æ–¥–µ–ª—å:** {summary['model_version']}")
                    if summary['notes']:
                        st.write(f"**–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:** {summary['notes']}")
                
            elif risk_action == "–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∏—Å–∫–æ–≤":
                if len(assessment_dates) < 2:
                    st.warning("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤.")
                else:
                    # –í—ã–±–æ—Ä –¥–∞—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    col1, col2 = st.columns(2)
                    with col1:
                        date1 = st.selectbox(
                            "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", 
                            assessment_dates[:-1],
                            index=0
                        )
                    with col2:
                        date2 = st.selectbox(
                            "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", 
                            [d for d in assessment_dates if d > date1],
                            index=0
                        )
                    
                    # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    changes = tracker.calculate_risk_changes(date1, date2)
                    
                    if changes:
                        st.write(f"### –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤ —Å {changes['date_before']} –ø–æ {changes['date_after']}")
                        st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:** {changes['students_count']}")
                        
                        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
                        risk_change = changes['mean_risk_change']
                        change_color = "red" if risk_change > 0 else "green"
                        st.write(f"**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞:** {risk_change:.3f} ({changes['mean_risk_before']:.3f} ‚Üí {changes['mean_risk_after']:.3f})")
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                        st.write("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                        change_stats_df = pd.DataFrame({
                            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': list(changes['change_stats'].keys()),
                            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤': list(changes['change_stats'].values())
                        })
                        st.dataframe(change_stats_df)
                        
                        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                        fig, ax = plt.subplots(figsize=(10, 6))
                        colors = ['darkgreen', 'lightgreen', 'gray', 'orange', 'red']
                        ax.bar(
                            change_stats_df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'],
                            change_stats_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'],
                            color=colors
                        )
                        ax.set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è')
                        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
                        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤')
                        plt.xticks(rotation=45, ha='right')
                        st.pyplot(fig)
                        
                        # –°—Ç—É–¥–µ–Ω—Ç—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º –∏ —É—Ö—É–¥—à–µ–Ω–∏–µ–º
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("#### –¢–æ–ø-5 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º")
                            improved_df = pd.DataFrame(changes['most_improved'])
                            improved_df['risk_change'] = improved_df['risk_change'].round(3)
                            st.dataframe(improved_df)
                        
                        with col2:
                            st.write("#### –¢–æ–ø-5 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —É—Ö—É–¥—à–µ–Ω–∏–µ–º")
                            deteriorated_df = pd.DataFrame(changes['most_deteriorated'])
                            deteriorated_df['risk_change'] = deteriorated_df['risk_change'].round(3)
                            st.dataframe(deteriorated_df)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                if st.button("–°–æ–∑–¥–∞—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"):
                    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞..."):
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∏—Å–∫–∞—Ö
                        assessment1 = tracker.get_risk_assessment(date1)
                        assessment2 = tracker.get_risk_assessment(date2)
                        
                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
                        report_generator = ReportGenerator()
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                        report_path = report_generator.generate_comparative_report(
                            risk_data1=assessment1['student_risks'],
                            risk_data2=assessment2['student_risks'],
                            date1=date1,
                            date2=date2
                        )
                        
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                        with open(report_path, 'r', encoding='utf-8') as f:
                            report_html = f.read()
                        
                        st.success(f"–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (HTML)",
                            data=report_html,
                            file_name=f"comparative_report_{date1}_vs_{date2}.html",
                            mime="text/html"
                        )
            
            elif risk_action == "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤":
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö
                last_assessment_key = assessment_dates[-1]
                last_assessment = tracker.get_risk_assessment(last_assessment_key)
                
                if last_assessment:
                    student_risks_df = last_assessment['student_risks']
                    
                    # –í—ã–±–æ—Ä —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    available_students = student_risks_df['student_id'].tolist()
                    selected_students = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", 
                        available_students
                    )
                    
                    if selected_students:
                        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                        date_range = st.slider(
                            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                            min_value=0,
                            max_value=len(assessment_dates)-1,
                            value=(0, len(assessment_dates)-1)
                        )
                        
                        selected_dates = assessment_dates[date_range[0]:date_range[1]+1]
                        
                        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–∏—Å–∫–æ–≤
                        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–∏—Å–∫–æ–≤..."):
                            fig = tracker.plot_risk_trends(selected_students)
                            st.pyplot(fig)
                            
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        risk_df = tracker.compare_student_risks(
                            selected_students,
                            start_date=selected_dates[0],
                            end_date=selected_dates[-1]
                        )
                        
                        if not risk_df.empty:
                            st.write("#### –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∏—Å–∫–∞—Ö")
                            risk_pivot = risk_df.pivot_table(
                                index='date',
                                columns='student_id',
                                values='dropout_probability'
                            )
                            st.dataframe(risk_pivot)
                            
                            # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
                            csv = risk_df.to_csv(index=False)
                            st.download_button(
                                label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                                data=csv,
                                file_name='student_risk_tracking.csv',
                                mime='text/csv',
                            )

else:  # –û —Å–∏—Å—Ç–µ–º–µ
    st.header("–û —Å–∏—Å—Ç–µ–º–µ")
    
    st.markdown("""
    ## –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    
    –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–º–µ–Ω–∏ –°.–Æ. –í–∏—Ç—Ç–µ.
    
    ### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
    - –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    - –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    
    ### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    2. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"
    3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ä–∏—Å–∫–∏ –æ—Ç—á–∏—Å–ª–µ–Ω–∏—è
    4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    ### –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
    
    –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
    
    - –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª –∏ —Ç.–¥.)
    - –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª, –ø—Ä–æ–ø—É—Å–∫–∏ –∑–∞–Ω—è—Ç–∏–π –∏ —Ç.–¥.)  
    - –°–æ—Ü–∏–∞–ª—å–Ω–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (–Ω–∞–ª–∏—á–∏–µ —Å—Ç–∏–ø–µ–Ω–¥–∏–∏, —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ —Ç.–¥.)
    - –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–º–æ—Ç–∏–≤–∞—Ü–∏—è, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ç.–¥.)
    
    –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è "dropout" –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è 0 (–Ω–µ –æ—Ç—á–∏—Å–ª–µ–Ω) –∏–ª–∏ 1 (–æ—Ç—á–∏—Å–ª–µ–Ω).
    """)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏
    st.sidebar.markdown("---")
    st.sidebar.info("–í–µ—Ä—Å–∏—è: 1.0.0\n–î–∞—Ç–∞: –ú–∞–π 2025")

# Footer
st.markdown("---")
st.markdown("–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º–µ–Ω–∏ –°.–Æ. –í–∏—Ç—Ç–µ ¬© 2025") 